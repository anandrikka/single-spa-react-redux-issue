/* eslint-disable max-len */
/* eslint-disable global-require */
const autoprefixer = require('autoprefixer');
// const git = require('git-rev-sync');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const path = require('path');
const TerserPlugin = require('terser-webpack-plugin');
const webpack = require('webpack');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const HtmlWebpackPlugin = require('html-webpack-plugin');
const rxPaths = require('rxjs/_esm5/path-mapping');

// const GIT_SHA = process.env.SOURCE_VERSION || git.long();
const projectRoot = path.join(__dirname, '../..');
const TITLE = 'Title';

function stringifyValues(obj) {
  const result = {};
  Object.keys(obj).forEach((key) => {
    result[key] = JSON.stringify(obj[key]);
  });
  return result;
}

// eslint-disable-next-line complexity
module.exports = function ({
  analyze,
  env = 'development',
  baseDomain
} = {}) {
  const isDevMode = env === 'development';

  const isUrl = (str) => /^https?:\/\//.test(str);

  const stats = {
    assets: true,
    children: false,
    chunks: false,
    colors: true,
    errorDetails: true,
    moduleTrace: false,
    modules: false
  };

  let envConfig;
  try {
    const envConfigPath = `./environments/${env}.js`;
    envConfig = require(envConfigPath).webpack;

    const featuresPath = './features.js';
    const featureConfig = require(featuresPath);
    envConfig.experimentalFeatures = featureConfig.ACTIVE_FEATURES[env];
    // eslint-disable-next-line no-empty
  } catch {}

  if (!envConfig) {
    envConfig = {};
  }

  if (!isUrl(baseDomain)) {
    baseDomain = envConfig.baseDomain || 'http://localhost:3300';
  }
  const authUrl = envConfig.authUrl;
  const logoutUrl = envConfig.logoutUrl;
  const basePath = '/dispatch'
  const config = {
    stats,
    mode: isDevMode ? 'development' : 'production',
    // target: 'web',
    entry: [
      './src/js/singleSpaEntry.js',
      // './src/js/main.js'
    ],
    output: {
      path: path.join(projectRoot, 'public'),
      filename: 'dist/dispatch.js',
      libraryTarget: 'umd'
    },
    resolve: {
      extensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],
      modules: [
        path.join(projectRoot, 'src'),
        path.join(projectRoot, 'node_modules')
      ],
      alias: {
        ...rxPaths(),
        '_': 'lodash',
        'app': path.join(projectRoot, 'src/js/components/app'),
        'components': path.join(projectRoot, 'src/js/components'),
        'config': path.join(projectRoot, 'src/config'),
        'hooks': path.join(projectRoot, 'src/js/hooks'),
        'interfaces': path.join(projectRoot, 'src/js/interfaces'),
        'test': path.join(projectRoot, 'src/js/test'),
        'services': path.join(projectRoot, 'src/js/services'),
        'svg': path.join(projectRoot, 'src/js/components/svg')
      }
    },
    module: {
      rules: [
      { parser: { system: false } }, 
      {
        test: /\.(t|j)sx?$/,
        include: [
          path.join(projectRoot, 'src'),
          path.join(projectRoot, 'node_modules/ansi-regex'),
          path.join(projectRoot, 'node_modules/strip-ansi')
        ],
        use: 'ts-loader'
      }, {
        enforce: 'pre',
        test: /\.js$/,
        loader: 'source-map-loader'
      }, {
        test: /\.scss$/,
        include: path.join(projectRoot, 'src'),
        use: [{
          loader: MiniCssExtractPlugin.loader
        }, {
          loader: 'typings-for-css-modules-loader',
          options: {
            banner: '// This file is automatically generated by typings-for-css-modules.\n// Do commit this file.\n// Do not change this file.\n',
            camelCase: 'dashesOnly',
            localIdentName: isDevMode ?
              '[name]__[local]___[hash:base64:5]' :
              '[hash:base64]',
            modules: true,
            namedExport: true,
            sass: true,
            sourceMap: isDevMode
          }
        }, {
          loader: 'postcss-loader',
          options: {
            sourceMap: isDevMode,
            plugins: [autoprefixer()]
          }
        }, {
          loader: 'sass-loader',
          options: {
            sourceMap: isDevMode,
            includePaths: [path.join(projectRoot, 'src')]
          }
        }]
      }, {
        test: /\.css$/,
        include: path.join(projectRoot, 'node_modules'),
        use: [MiniCssExtractPlugin.loader, 'css-loader']
      }, {
        test: /\.(jpe?g|png|gif|svg)$/i,
        loader: 'file-loader',
        options: {
          name: '[name].[ext]',
          outputPath: 'assets/images'
        }
      }]
    },
    plugins: [
      // only include the english locale of momentjs
      // https://github.com/webpack/webpack/issues/59#issuecomment-158029777
      new webpack.ContextReplacementPlugin(/moment[/\\]locale/, /en$/),
      new webpack.DefinePlugin({
        ENV: stringifyValues({
          AUTH_URL: authUrl,
          LOGOUT_URL: logoutUrl,
          BASE_DOMAIN: baseDomain,
          BASE_PATH: basePath,
          ENV: isDevMode ? 'development' : 'production',
          ROLLBAR_ENV: env,
          // VCS_VERSION: GIT_SHA,
          EXPERIMENTAL_FEATURES: envConfig.experimentalFeatures || []
        })
      }),
      // new webpack.optimize.ModuleConcatenationPlugin(),
      new HtmlWebpackPlugin({
        template: path.join(projectRoot, 'src/index.html'),
        templateParameters: {
          TITLE: envConfig.titlePrefix ? `${envConfig.titlePrefix}${TITLE}` : TITLE,
          NEW_RELIC_APPLICATION_ID: envConfig.newRelicApplicationId
        }
      }),
      new MiniCssExtractPlugin({
        filename: 'dist/dispatch.css'
      }),
      new webpack.WatchIgnorePlugin([
        /css\.d\.ts$/
      ]),
      // new webpack.optimize.LimitChunkCountPlugin({
      //   maxChunks: 1,
      // })
    ],
    // optimization: {
    //   minimizer: [
    //     new TerserPlugin(),
    //     new OptimizeCSSAssetsPlugin({})
    //   ]
    // },

    devtool: (env === 'development' || env === 'test') ? 'source-map' : 'nosources-source-map',
    devServer: {
      stats,
      contentBase: path.join(projectRoot, 'public'),
      port: process.env.PORT || 3001,
      historyApiFallback: true,
      headers: {
        "Access-Control-Allow-Origin": "*",
      },
      proxy: isDevMode && {
        [`${basePath}/app`]: 'http://localhost:4400',
        [`${basePath}/api`]: 'http://localhost:4400'
      }
    },
    externals: [
      'react',
      'react-dom'
    ]
  };

  if (analyze) {
    config.plugins.push(new BundleAnalyzerPlugin({ generateStatsFile: true }));
  }
  return config;
};
